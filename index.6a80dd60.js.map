{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar gameField = document.querySelector(\".game-field\");\nvar gameScore = document.querySelector(\".game-score\");\nvar button = document.querySelector(\".button\");\nvar messageStart = document.querySelector(\".message-start\");\nvar winMessage = document.querySelector(\".message-win\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar rows = 4;\nvar columns = 4;\nvar score = 0;\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nbutton.addEventListener(\"click\", function() {\n    button.classList.replace(\"start\", \"restart\");\n    button.innerText = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    winMessage.classList.add(\"hidden\");\n    startGame();\n});\nfunction startGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    score = 0;\n    addRandomNumber();\n    addRandomNumber();\n    updateCells();\n}\nfunction addRandomNumber() {\n    var number = Math.random() < 0.9 ? 2 : 4;\n    while(hasSpace()){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            board[r][c] = number;\n            break;\n        }\n    }\n    updateCells();\n}\nfunction hasSpace() {\n    for(var r = 0; r < rows; r++){\n        if (board[r].includes(0)) return true;\n    }\n    return false;\n}\nfunction updateCells() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = gameField.rows[r].cells[c];\n        var number = board[r][c];\n        cell.innerText = \"\";\n        cell.className = \"field-cell\";\n        if (number > 0) {\n            cell.innerText = number;\n            cell.classList.add(\"field-cell--\".concat(number));\n        }\n    }\n    isWin();\n    updateScore();\n    if (isLost()) loseMessage.classList.remove(\"hidden\");\n}\nfunction isWin() {\n    if (board.some(function(arr) {\n        return arr.some(function(cell) {\n            return cell === 2048;\n        });\n    })) winMessage.classList.remove(\"hidden\");\n    return false;\n}\nfunction updateScore() {\n    gameScore.innerText = score;\n}\nfunction isLost() {\n    if (hasSpace()) return false;\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns - 1; c++){\n        if (board[r][c] === board[r][c + 1]) return false;\n    }\n    for(var r1 = 0; r1 < rows - 1; r1++)for(var c1 = 0; c1 < columns; c1++){\n        if (board[r1][c1] === board[r1 + 1][c1]) return false;\n    }\n    return true;\n}\nfunction hasChangedBoard(currentBoard, copyBoard) {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (currentBoard[r][c] !== copyBoard[r][c]) return true;\n    }\n    return false;\n}\nvar transponseBoard = function(currentBoard) {\n    var transponsedBoard = currentBoard;\n    transponsedBoard = transponsedBoard[0].map(function(_, columnIndex) {\n        return transponsedBoard.map(function(row) {\n            return row[columnIndex];\n        });\n    });\n    return transponsedBoard;\n};\nvar slide = function(row) {\n    var newRow = row.filter(function(num) {\n        return num !== 0;\n    });\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        score += newRow[i];\n        newRow[i + 1] = 0;\n    }\n    var filteredRow = newRow.filter(function(num) {\n        return num !== 0;\n    });\n    var zerosToAdd = Array(columns - filteredRow.length).fill(0);\n    var finalRow = filteredRow.concat(zerosToAdd);\n    return finalRow;\n};\nvar slideLeft = function() {\n    var transponsedBoard = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : board;\n    for(var r = 0; r < rows; r++){\n        var row = transponsedBoard[r].slice();\n        row = slide(row);\n        transponsedBoard[r] = row;\n    }\n    return transponsedBoard;\n};\nvar slideRight = function() {\n    var transponsedBoard = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : board;\n    for(var r = 0; r < rows; r++){\n        var row = transponsedBoard[r].slice().reverse();\n        row = slide(row);\n        transponsedBoard[r] = row.reverse();\n    }\n    return transponsedBoard;\n};\nvar slideUp = function() {\n    var newBoard = transponseBoard(board);\n    var updatedBoard = slideLeft(newBoard);\n    board = transponseBoard(updatedBoard);\n};\nvar slideDown = function() {\n    var newBoard = transponseBoard(board);\n    var updatedBoard = slideRight(newBoard);\n    board = transponseBoard(updatedBoard);\n};\ndocument.addEventListener(\"keyup\", function(e) {\n    var copyBoard = board.map(function(arr) {\n        return arr.slice();\n    });\n    e.preventDefault();\n    switch(e.code){\n        case \"ArrowUp\":\n            slideUp();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            break;\n        case \"ArrowLeft\":\n            slideLeft();\n            break;\n    }\n    if (hasChangedBoard(board, copyBoard)) addRandomNumber();\n    updateCells();\n});\n\n//# sourceMappingURL=index.6a80dd60.js.map\n","'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  startGame();\n});\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n\n  addRandomNumber();\n  addRandomNumber();\n  updateCells();\n}\n\nfunction addRandomNumber() {\n  const number = Math.random() < 0.9 ? 2 : 4;\n\n  while (hasSpace()) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = number;\n      break;\n    }\n  }\n\n  updateCells();\n}\n\nfunction hasSpace() {\n  for (let r = 0; r < rows; r++) {\n    if (board[r].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateCells() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = gameField.rows[r].cells[c];\n      const number = board[r][c];\n\n      cell.innerText = '';\n      cell.className = 'field-cell';\n\n      if (number > 0) {\n        cell.innerText = number;\n        cell.classList.add(`field-cell--${number}`);\n      }\n    }\n  }\n\n  isWin();\n  updateScore();\n\n  if (isLost()) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction isWin() {\n  if (board.some((arr) => arr.some((cell) => cell === 2048))) {\n    winMessage.classList.remove('hidden');\n  }\n\n  return false;\n}\n\nfunction updateScore() {\n  gameScore.innerText = score;\n}\n\nfunction isLost() {\n  if (hasSpace()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction hasChangedBoard(currentBoard, copyBoard) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (currentBoard[r][c] !== copyBoard[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nconst transponseBoard = (currentBoard) => {\n  let transponsedBoard = currentBoard;\n\n  transponsedBoard = transponsedBoard[0].map((_, columnIndex) =>\n    transponsedBoard.map((row) => row[columnIndex]),\n  );\n\n  return transponsedBoard;\n};\n\nconst slide = (row) => {\n  const newRow = row.filter((num) => num !== 0);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      score += newRow[i];\n      newRow[i + 1] = 0;\n    }\n  }\n\n  const filteredRow = newRow.filter((num) => num !== 0);\n  const zerosToAdd = Array(columns - filteredRow.length).fill(0);\n  const finalRow = filteredRow.concat(zerosToAdd);\n\n  return finalRow;\n};\n\nconst slideLeft = (transponsedBoard = board) => {\n  for (let r = 0; r < rows; r++) {\n    let row = transponsedBoard[r].slice();\n\n    row = slide(row);\n    transponsedBoard[r] = row;\n  }\n\n  return transponsedBoard;\n};\n\nconst slideRight = (transponsedBoard = board) => {\n  for (let r = 0; r < rows; r++) {\n    let row = transponsedBoard[r].slice().reverse();\n\n    row = slide(row);\n    transponsedBoard[r] = row.reverse();\n  }\n\n  return transponsedBoard;\n};\n\nconst slideUp = () => {\n  const newBoard = transponseBoard(board);\n\n  const updatedBoard = slideLeft(newBoard);\n\n  board = transponseBoard(updatedBoard);\n};\n\nconst slideDown = () => {\n  const newBoard = transponseBoard(board);\n\n  const updatedBoard = slideRight(newBoard);\n\n  board = transponseBoard(updatedBoard);\n};\n\ndocument.addEventListener('keyup', (e) => {\n  const copyBoard = board.map((arr) => arr.slice());\n\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n  }\n\n  if (hasChangedBoard(board, copyBoard)) {\n    addRandomNumber();\n  }\n\n  updateCells();\n});\n"],"names":["gameField","document","querySelector","gameScore","button","messageStart","winMessage","loseMessage","score","board","addRandomNumber","number","Math","random","hasSpace","r","floor","c","updateCells","includes","cell","rows","cells","innerText","className","classList","add","concat","some","arr","remove","isLost","columns","r1","c1","addEventListener","replace","transponseBoard","currentBoard","transponsedBoard","map","_","columnIndex","row","slide","newRow","filter","num","i","length","filteredRow","zerosToAdd","Array","fill","slideLeft","arguments","slice","slideRight","reverse","slideUp","updatedBoard","slideDown","e","copyBoard","preventDefault","code","hasChangedBoard"],"version":3,"file":"index.6a80dd60.js.map"}